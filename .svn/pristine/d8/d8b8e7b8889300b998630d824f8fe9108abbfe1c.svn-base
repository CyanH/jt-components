<template>
  <div class="page container-component">
    <div class="container-full">
      <div class="container-full__body">
        <div ref="body" class="container-content">
          <!--工具栏-->
          <div class="head-container">
            <!--如果想在工具栏加入更多按钮，可以使用插槽方式， slot = 'left' or 'right'-->
            <crudOperation :permission="permission" :view-bar="false" />
          </div>

          <!-- 溯源记录详情 -->
          <el-dialog title="溯源记录详情" :visible="dialogTableVisible" :before-close="closeTableDialog" class="spec-dialog">
            <el-table :data="syjlDetailList">
              <el-table-column width="50" />
              <el-table-column type="index" label="序号" width="150" />
              <el-table-column label="溯源码" width="280">
                <template slot-scope="scope">
                  <a class="code" @click="showCode(scope.row.syCode)">{{ scope.row.syCode }}</a>
                </template>
              </el-table-column>
              <el-table-column property="scanNumber" label="扫码次数" width="180" />
              <el-table-column prop="date" label="溯源时间" sortable />
            </el-table>
          </el-dialog>

          <!-- 溯源二维码 -->
          <el-dialog title="溯源码（扫码预览溯源信息）" :visible="codeDialogVisible" :before-close="closeCodeDialog" :show-full-btn="false" class="code-dialog" width="550px">
            <div class="codeBox">
              <img :src="codeImg">
              <div ref="qrCodeUrl" class="qrcode" />
            </div>
          </el-dialog>

          <!--表格渲染-->
          <el-table ref="table" v-loading="crud.loading" :max-height="tableHeight" :data="crud.data" style="width: 100%;" stripe @selection-change="crud.selectionChangeHandler">
            <el-table-column type="selection" width="55" />
            <el-table-column label="序号" type="index" width="80" />
            <el-table-column prop="labelAddress" label="溯源码样式" width="240px">
              <template slot-scope="scope">
                <img style="width: 70px; height: 70px" :src="baseApi + '/file'+scope.row.labelAddress">
              </template>
            </el-table-column>
            <el-table-column prop="batchNo" label="批次" width="400px" />
            <el-table-column prop="amount" label="数量/个" />
            <el-table-column prop="isOkNumber" label="已扫码数量/个" />
            <el-table-column prop="createTime" label="创建时间" sortable>
              <template slot-scope="scope">
                {{ parseTime(scope.row.createTime,'{y}-{m}-{d}') }}
              </template>
            </el-table-column>
            <el-table-column label="操作" width="220px" align="center">
              <template slot-scope="scope">
                <el-button type="text" @click="donwload(scope.row.labelAddress)">下载</el-button>
                <el-button type="text" @click="sourceCode(scope.row)">溯源码</el-button>
                <el-button type="text" @click="deleteSyjl(scope.row)">删除</el-button>
              </template>
            </el-table-column>
          </el-table>
          <!--分页组件-->
          <pagination />
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { mapGetters } from 'vuex'
import crudPlantSyjl from '@/api/source/plantSyjl'
import { getpickPerson } from '@/api/wisdom/plantFarmWorkRecords'

import QRCode from 'qrcodejs2'
import CRUD, { presenter, header, form, crud } from '@crud/crud'
import crudOperation from '@crud/CRUD.operation'
import pagination from '@crud/Pagination'

const defaultForm = { id: null, syCode: null, syBatchId: null, BatchNo: null, syCodeTypeId: null, Date: null, amount: null, isOkNumber: null, scanNumber: null, info: null, createTime: null, syUser: null }

export default {
  name: 'PlantSyjl',
  components: { pagination, crudOperation },
  mixins: [presenter(), header(), form(defaultForm), crud()],
  cruds() {
    return CRUD({
      title: '溯源码记录', url: 'api/plantSyjl', idField: 'id', sort: 'date,desc', crudMethod: { ...crudPlantSyjl }, optShow: { add: false, del: true, download: true }
    })
  },
  data() {
    return {
      permission: {
        edit: ['admin', 'plantSyjl:edit'],
        del: ['admin', 'plantBase:del']
      },
      rules: {
        plantBaseName: [{ required: true, message: '请输入基地名称', trigger: 'blur' }],
        PlantBaseArea: [{ required: true, message: '请输入基地面积', trigger: 'blur' }],
        dutyPersonName: [{ required: true, message: '请选择负责人', trigger: 'change' }],
        config: [{ required: true, message: '请输入描点对象', trigger: 'blur' }]
      },
      tableHeight: null,
      personList: [],
      dialogTableVisible: false,
      syjlDetailList: [],
      codeDialogVisible: false,
      codeImg: ''
    }
  },
  computed: {
    ...mapGetters(['baseApi'])
  },
  mounted() {
    this.tableHeight = this.$refs.body.offsetHeight - 138
    this.getData()
  },
  methods: {
    getData() {
      getpickPerson({ workerType: '种植基地负责人' }).then(res => {
        this.personList = res
      })
    },
    handleChange(value) {
      this.personList.map(item => {
        if (item.id === value) {
          this.form.dutyPersonName = item.username
          this.form.dutyPersonId = item.id
          this.form.dutyPersonPhone = item.phone
        }
      })
    },
    handleCommand(command) {
      if (command.name === 'view') {
        this.crud.toView(command.value)
      } else if (command.name === 'edit') {
        this.crud.toEdit(command.value)
      } else if (command.name === 'del') {
        this.$confirm('确定删除该条记录吗？', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          this.crud.doDelete(command.value)
        })
      }
    },
    closeTableDialog() {
      this.dialogTableVisible = false
    },
    closeCodeDialog() {
      this.codeDialogVisible = false
    },
    // 下载图片
    donwload(e) {
      if (!e) {
        return this.msg.msgWarning('下载失败')
      }
      console.log(this.baseApi + '/file' + e)
      const url = this.baseApi + '/file' + e
      this.getUrlBase64(url).then(base64 => {
        const a = document.createElement('a')
        a.style.display = 'none'
        a.download = e
        a.href = base64
        document.body.appendChild(a)
        a.click()
      })
    },
    getUrlBase64(url) {
      return new Promise(resolve => {
        let canvas = document.createElement('canvas')
        const ctx = canvas.getContext('2d')
        const img = new Image()
        img.crossOrigin = 'Anonymous' // 允许跨域
        img.src = url
        img.onload = function() {
          canvas.height = 300
          canvas.width = 300
          ctx.drawImage(img, 0, 0, 300, 300)
          const dataURL = canvas.toDataURL('image/png')
          canvas = null
          resolve(dataURL)
        }
      })
    },
    // 溯源码
    sourceCode(item) {
      this.codeImg = this.baseApi + '/file' + item.labelAddress
      this.syjlDetailList = []
      crudPlantSyjl.getBySyjl({ id: item.id }).then(res => {
        for (var i = 0; i < res.length; i++) {
          this.syjlDetailList.push(res[i])
        }
      })

      this.dialogTableVisible = true
    },
    deleteSyjl(val) {
      this.$confirm('确定删除该条记录吗？', '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }).then(() => {
        this.crud.doDelete(val)
      })
    },
    showCode(code) {
      this.codeDialogVisible = true
      this.$nextTick(() => {
        this.$refs.qrCodeUrl.innerHTML = ''
        new QRCode(this.$refs.qrCodeUrl, {
          text: code, // 需要转换为二维码的内容
          width: 215,
          height: 215,
          colorDark: '#000000',
          colorLight: '#ffffff',
          correctLevel: QRCode.CorrectLevel.H
        })
      })
    }
  }
}
</script>

<style lang="scss">
.spec-dialog .el-dialog__body {
  padding: 3px 30px;
  height: calc(100vh - 140px);
}

.code{
  color: #337ab7;
  cursor: pointer;
}

.code-dialog  .el-dialog__body{
  padding: 30px;
  text-align: center;

  .codeBox{
    display: inline-block;
    position: relative;
  }

  .qrcode{
    position: absolute;
    top: 22px;
    left: 50px;
    width: 150px;
    z-index: 99;
  }
}
</style>

