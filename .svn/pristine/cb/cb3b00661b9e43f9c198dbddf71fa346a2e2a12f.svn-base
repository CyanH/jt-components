<template>
  <div v-if="pictrueList" style="display: flex; width: 100%; flex-wrap: wrap">
    <div v-for="(item, index) in pictrueList" :key="index" class="imgCard">
      <el-image
        v-if="item.type === 'image'"
        class="img"
        :src="item.url"
        fit="contain"
      />
      <img
        v-else-if="item.type === 'other'"
        class="img"
        src="~@/assets/images/other.svg"
      >
      <img v-else class="img" :src="svgList[item.type]">
      <div class="name">{{ item.name }}</div>

      <div class="preDel">
        <i v-if="item.type == 'image'" class="el-icon-zoom-in" @click="handlePreview(item)" />
        <i
          class="el-icon-download"
          style="padding: 5px 5px"
          @click="handleDownload(item)"
        />
      </div>
    </div>
    <br>
  </div>
</template>

<script>
import { mapGetters } from 'vuex'
import { getToken } from '@/utils/auth'
export default {
  data() {
    return {
      svgList: {
        pdf: require('@/assets/images/pdf.svg'),
        ppt: require('@/assets/images/ppt.svg'),
        pptx: require('@/assets/images/ppt.svg'),
        txt: require('@/assets/images/txt.svg'),
        xlsx: require('@/assets/images/xls.svg'),
        xls: require('@/assets/images/xls.svg'),
        docx: require('@/assets/images/doc.svg'),
        doc: require('@/assets/images/doc.svg')
      },
      headers: {
        Authorization: getToken()
      },
      pictrueList: [],
      picAddress: ''
    }
  },
  computed: {
    ...mapGetters(['baseApi'])
  },

  methods: {
    setValue(row) {
      if (row.id) {
        if (row.picList) {
          this.picList = row.picList
          this.fileList = row.picList
          this.pictrueList = row.picList.map((item, index) => {
            console.log(item, 'item')
            var obj = {}
            obj.url = this.baseApi + '/file' + item
            obj.address = item
            obj.name = item.substr(item.lastIndexOf('\\') + 1)
            if (
              item.lastIndexOf('.bmp') !== -1 ||
              item.lastIndexOf('.jpg') !== -1 ||
              item.lastIndexOf('.jpeg') !== -1 ||
              item.lastIndexOf('.png') !== -1 ||
              item.lastIndexOf('.gif') !== -1 ||
              item.lastIndexOf('.webp') !== -1
            ) {
              obj.type = 'image'
            } else if (
              item.lastIndexOf('.docx') === -1 &&
              item.lastIndexOf('.doc') === -1 &&
              item.lastIndexOf('.xlsx') === -1 &&
              item.lastIndexOf('.ppt') === -1 &&
              item.lastIndexOf('.pptx') === -1 &&
              item.lastIndexOf('.xls') === -1 &&
              item.lastIndexOf('.pdf') === -1 &&
              item.lastIndexOf('.txt') === -1
            ) {
              obj.type = 'other'
            } else {
              obj.type = item.slice(item.lastIndexOf('.') + 1, item.length)
            }
            return obj
          })
        } else {
          this.pictrueList = []
        }
      }
    },
    handleDownload(file) {
      // downloadFile
      console.log(file, 'file')
      try {
        const address = file.url
        console.log(address, 'addresss')
        if (address.endsWith('pdf')) {
          this.downloadPDF(address, file.name)
          var tempLink = document.createElement('a')
          tempLink.style.display = 'none'
          tempLink.href = address
          tempLink.setAttribute('download', file.name)
          tempLink.setAttribute('target', '_blank')
          document.body.appendChild(tempLink)
          tempLink.click()
          document.body.removeChild(tempLink)
        } else if (address.endsWith('pdf')) {
          window.open(address, '_blank')
        } else if (address.endsWith('pptx')) {
          window.open(address, '_blank')
        } else if (address.endsWith('xlsx')) {
          window.open(address, '_blank')
        } else if (address.endsWith('xls')) {
          window.open(address, '_blank')
        } else if (address.endsWith('doc')) {
          window.open(address, '_blank')
        } else if (address.endsWith('docx')) {
          window.open(address, '_blank')
        } else {
          const name = address.substr(address.lastIndexOf('/') + 1)
          this.downloadIamge(address, name)
        }
      } catch (err) {
        // console.log(err);
        this.$message({
          type: 'error',
          message: '图片下载失败'
        })
      }
    },
    downloadIamge(imgsrc, name) {
      const image = new Image()
      // 解决跨域 Canvas 污染问题
      image.setAttribute('crossOrigin', 'anonymous')
      image.onload = function() {
        const canvas = document.createElement('canvas')
        canvas.width = image.width
        canvas.height = image.height
        const context = canvas.getContext('2d')
        context.drawImage(image, 0, 0, image.width, image.height)
        const url = canvas.toDataURL('image/png') // 得到图片的base64编码数据
        const a = document.createElement('a') // 生成一个a元素
        const event = new MouseEvent('click') // 创建一个单击事件
        a.download = name || 'photo' // 设置图片名称
        a.href = url // 将生成的URL设置为a.href属性
        a.dispatchEvent(event) // 触发a的单击事件
      }
      image.src = imgsrc
    },
    handlePreview(item) {
      this.$store.dispatch('preview/setImgSrc', item.url)
      this.$store.dispatch('preview/open')
    },
    handleSuccess(response, file, fileList) {
      // fileList 附件
      console.log(response, 'response')
      var obj = {}
      if (file.raw.type.indexOf('image') !== -1) {
        obj.url = this.baseApi + '/file' + response.address
        obj.name = response.name
        obj.address = response.address
        obj.size = response.size
        obj.type = 'image'
        this.pictrueList.splice(1, 0, obj)
      } else {
        obj.url = this.baseApi + '/file' + response.address
        obj.name = response.name
        obj.address = response.address
        obj.size = response.size
        obj.type = response.address.slice(
          response.address.lastIndexOf('.') + 1,
          response.address.length
        )
        if (
          obj.type !== 'txt' &&
          obj.type !== 'pdf' &&
          obj.type !== 'docx' &&
          obj.type !== 'doc' &&
          obj.type !== 'xlsx' &&
          obj.type !== 'xls' &&
          obj.type !== 'ppt'
        ) {
          obj.type = 'other'
        }
        this.pictrueList.splice(this.pictrueList.length, 0, obj)
      }
      this.picAddress = this.pictrueList.map((item) => item.address).join(',')
      console.log(this.picAddress, 'pic')
      this.$emit('imgUpload', this.picAddress)
    },
    handleDeleImg(item, index) {
      this.pictrueList.splice(index, 1)
      for (var i = 0; i < this.picList.length; i++) {
        console.log(this.picList[i], 11111)
        console.log(item, 11111)
        if (this.picList[i] === item.address) {
          this.picList.splice(i, 1)
          console.log(this.picList, '111111111111')
          this.picAddress = this.picList.map((item) => item).join(',')
          console.log(this.picAddress, 'pic')
          this.$emit('imgUpload', this.picAddress)
        }
      }
    },
    clear() {
      this.$refs['myUpload'].clearFiles()
      this.picAddress = ''
      this.picList = []
      this.pictrueList = []
    }
  }
}
</script>

<style lang="scss" scoped>
.imgCard {
  margin: 0 10px 15px 10px;
  position: relative;
  text-align: center;
  width: 120px;

  .name{
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    padding: 0 10px;
  }
}
.preDel {
  height: 120px;
  width: 120px;
  position: absolute;
  background: rgba(0, 0, 0, 0.4);
  top: 0;
  opacity: 0;
  text-align: center;
  line-height: 120px;
  cursor: default;
  color: #fff;
  font-size: 20px;
  opacity: 0;
  transition: opacity 0.4s;
  &:hover {
    opacity: 1;
  }
  i{
    cursor: pointer;
  }
}
.img {
  width: 120px;
  height: 120px;
}
</style>
