<template>
  <div class="page container-component">
    <div class="container-full">
      <div class="container-full__body">
        <div ref="body" class="container-content">
          <!--工具栏-->
          <div class="head-container">
            <!--如果想在工具栏加入更多按钮，可以使用插槽方式， slot = 'left' or 'right'-->
            <crudOperation :permission="permission" @choose="handleChoose">
              <template slot="right">
                <!-- 搜索 -->
                <el-input v-model="query.ProductName" prefix-icon="el-icon-alisearch" clearable placeholder="请输入搜索内容" style="width: 280px;" class="filter-item" @keyup.enter.native="crud.toQuery" @clear="crud.toQuery" />
              </template>
            </crudOperation>
          </div>

          <!--查看表单组件-->
          <view-dialog :crud="crud" :form="form" :fileList="fileList" :srcList="srcList"></view-dialog>

          <!--编辑表单组件-->
          <el-dialog :title="crud.status.title" :close-on-click-modal="false" :before-close="crud.cancelCU" :visible="crud.status.cu > 0" width="980px">
            <el-form ref="form" :inline="true" :model="form" :rules="rules" label-width="115px">
              <el-form-item label="名称" prop="name">
                <el-input v-model="form.name" style="width: 180px;" />
              </el-form-item>

              <el-form-item label="检测类型">
                <el-select v-model="form.type" placeholder="请选择" style="width: 180px;">
                  <el-option label="自检" :value="0" />
                  <el-option label="第三方权威机构" :value="1" />
                </el-select>
              </el-form-item>

              <el-form-item label="检测机构">
                <el-input v-model="form.detectionOrganization" style="width: 180px;" />
              </el-form-item>

              <el-form-item label="检测标准">
                <el-input v-model="form.detectionCriterion" style="width: 180px;" />
              </el-form-item>

              <el-form-item label="检测时间">
                <el-date-picker v-model="form.detectionDate" value-format="yyyy-MM-dd" type="date" placeholder="选择日期" style="width: 180px;" />
              </el-form-item>

              <el-form-item label="检测结果">
                <el-select v-model="form.detectionRes" placeholder="请选择" style="width: 180px;">
                  <el-option label="合格" :value="0" />
                  <el-option label="不合格" :value="1" />
                </el-select>
              </el-form-item>

              <el-form-item label="产品">
                <el-select v-model="form.productId" placeholder="请选择" style="width: 180px;">
                  <el-option v-for="item in productList" :key="item.id" :label="item.productName" :value="item.id" />
                </el-select>
              </el-form-item>

              <div>
                <el-form-item label="检测结论">
                  <el-input v-model="form.info" type="textarea" style="width: 480px;" rows="4" />
                </el-form-item>
              </div>

              <div style="padding-left:115px">
                <el-upload list-type="picture-card" name="filename" :headers="headers" accept=".jpg,.jpeg,.png,.gif,.bmp,.JPG,.JPEG,.PBG,.GIF,.BMP" :action="baseApi+ '/api/plantBreed/uploading'"
                  :on-success="handleAvatarSuccess" :on-remove="handleRemove" :file-list="fileList" :before-upload="beforeAvatarUpload">
                  <i class="el-icon-plus" />
                </el-upload>
              </div>
            </el-form>
            <div slot="footer" class="dialog-footer">
              <el-button :loading="crud.status.cu === 2" type="primary" @click="crud.submitCU">确认</el-button>
              <el-button @click="crud.cancelCU">取消</el-button>
            </div>
          </el-dialog>

          <!--列表渲染-->
          <card-cont v-show="chooseType === 'card'" :crud="crud"></card-cont>

          <!--表格渲染-->
          <table-cont v-show="chooseType === 'list'" :crud="crud" :maxHeight="tableHeight"></table-cont>

          <!--分页组件-->
          <pagination />
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { mapGetters } from 'vuex'
import { getToken } from '@/utils/auth'
import crudPlantSyDetection from '@/api/plantSyDetection'
import { getProduct } from '@/api/source/plantSyProduct'
import CRUD, { presenter, header, form, crud } from '@crud/crud'
import crudOperation from '@crud/CRUD.operation'
import pagination from '@crud/Pagination'

import tableCont from './components/table.vue'
import cardCont from './components/card.vue'
import viewDialog from './components/viewDialog'

const defaultForm = { id: null, name: null, type: null, detectionOrganization: null, detectionCriterion: null, detectionDate: null, detectionRes: null, productId: null, status: null, info: null, by1: null, by2: null, createBy: null, createTime: null, updateBy: null, updateTime: null, ord: null, isDelete: null }
let imageArr = []
export default {
  name: 'PlantManagement',
  components: { pagination, crudOperation, tableCont, cardCont, viewDialog },
  mixins: [presenter(), header(), form(defaultForm), crud()],
  cruds() {
    return CRUD({ title: '检测信息管理', url: 'api/plantSyDetection', idField: 'id', sort: 'id,desc', crudMethod: { ...crudPlantSyDetection } })
  },
  data() {
    return {
      permission: {
        add: ['admin', 'plantSyDetection:add'],
        edit: ['admin', 'plantSyDetection:edit'],
        del: ['admin', 'plantSyDetection:del']
      },
      headers: {
        Authorization: getToken()
      },
      rules: {
        name: [
          { required: true, message: '检测信息名称不能为空', trigger: 'blur' }
        ]
      },
      productList: [],
      fileList: [],
      srcList: [],
      chooseType: 'list',
      tableHeight: null
    }
  },
  computed: {
    ...mapGetters(['baseApi'])
  },
  mounted() {
    this.tableHeight = this.$refs.body.offsetHeight - 96
    this.getData()
  },
  methods: {
    [CRUD.HOOK.beforeToEdit]() {
      const arr = []
      this.form.picList.map(it => {
        arr.push({ url: this.baseApi + '/file' + it, response: it })
      })
      this.fileList = arr
      imageArr = this.form.picList
    },
    [CRUD.HOOK.beforeToView]() {
      const arr = []
      this.srcList = []
      this.form.picList.map(it => {
        arr.push({ url: this.baseApi + '/file' + it, response: it })
        this.srcList.push(this.baseApi + '/file' + it)
      })
      this.fileList = arr
    },
    [CRUD.HOOK.afterSubmit]() {
      this.clearImage()
    },
    clearImage() {
      imageArr = []
      this.fileList = []
    },
    handleAvatarSuccess(res, file) {
      imageArr.push(res.address)
      this.form.plantSyDetectionPic = imageArr.join(',')
    },
    handleRemove(file, fileList) {
      imageArr = []
      fileList.map(it => {
        imageArr.push(it.response)
      })
      this.form.plantSyDetectionPic = imageArr.join(',')
    },
    beforeAvatarUpload(file) {
      const isJPG = file.type.indexOf('image') !== -1
      if (!isJPG) {
        this.$message.error('请上传图片！')
      }
      return isJPG
    },
    getData() {
      getProduct().then(res => {
        this.productList = res.content
      })
    },
    handleChoose(value) {
      this.chooseType = value
    }
  }
}
</script>
<style>
.el-input--suffix .el-input__inner {
  height: 36px;
  padding-right: 30px;
}
</style>

