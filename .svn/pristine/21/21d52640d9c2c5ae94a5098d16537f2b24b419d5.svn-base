/**
 * @description 创建菜单
 * @param {Function} h createElement
 * @param {Object} menu 菜单项
 */
export function elMenuItem(h, menu, parentPath) {
  if (menu.hidden) return
  const icon = <icon-svg name={menu.meta.icon} />
  let index = menu.path
  if (parentPath) {
    index = parentPath + '/' + index
  }
  return (
    <el-menu-item key={index} index={index}>
      {icon}
      <span slot='title'>{menu.meta.title || '未命名菜单'}</span>
    </el-menu-item>
  )
}

export function test(h, menu) {
  const cMenu = menu.children[0]
  if (menu.hidden) return
  const icon = <icon-svg name={cMenu.meta.icon} />
  const index = menu.path
  return (
    <el-menu-item key={index} index={index}>
      {icon}
      <span slot='title'>{cMenu.meta.title || '未命名菜单'}</span>
    </el-menu-item>
  )
}

/**
 * @description 创建子菜单
 * @param {Function} h createElement
 * @param {Object} menu 菜单项
 */
export function elSubmenu(h, menu) {
  const icon = <icon-svg slot='title' name={menu.meta.icon} />

  return (
    <el-submenu key={menu.path} index={menu.path}>
      {icon}
      <span slot='title'>{menu.meta.title || '未命名菜单'}</span>
      {menu.children.map(child => createMenu.call(this, h, child, menu.path))}
    </el-submenu>
  )
}

/**
 * @description 在组件中调用此方法渲染菜单项目
 * @param {Function} h createElement
 * @param {Object} menu 菜单项
 */
export function createMenu(h, menu, parentPath) {
  if (menu.children === undefined) return elMenuItem.call(this, h, menu, parentPath)
  // if (menu.meta === undefined) return test.call(this, h, menu, parentPath)
  return elSubmenu.call(this, h, menu)
}
