<template>
  <div class="page container-component">
    <div class="container-full">
      <div class="container-full__body">
        <el-row :gutter="20" style="height:100%;margin:0">
          <!--侧边部门数据-->
          <el-col :xs="9" :sm="6" :md="5" :lg="4" :xl="4" style="padding:20px;" class="left-col">
            <div class="head-container">
              <el-input
                v-model="deptName"
                clearable
                size="small"
                placeholder="输入部门名称搜索"
                prefix-icon="el-icon-alisearch"
                class="filter-item"
                @input="getDeptDatas"
              />
            </div>
            <el-tree
              :data="deptDatas"
              :load="getDeptDatas"
              :props="defaultProps"
              :expand-on-click-node="false"
              lazy
              highlight-current
              @node-click="handleNodeClick"
            />
          </el-col>
          <!--用户数据-->
          <el-col :xs="15" :sm="18" :md="19" :lg="20" :xl="20" style="height:100%;padding: 0 0 0 20px">
            <div class="right-col">
              <!--工具栏-->
              <div class="head-container">
                <div v-if="crud.props.searchToggle">
                  <!-- 搜索 -->
                  <el-input
                    v-model="query.blurry"
                    clearable
                    size="small"
                    placeholder="输入名称或者邮箱搜索"
                    prefix-icon="el-icon-alisearch"
                    style="width: 200px;"
                    class="filter-item"
                    @keyup.enter.native="crud.toQuery"
                  />
                  <date-range-picker v-model="query.updateTime" class="date-item" />
                  <el-select
                    v-model="query.isQuit"
                    clearable
                    size="small"
                    placeholder="状态"
                    class="filter-item"
                    style="width: 90px"
                    @change="crud.toQuery"
                  >
                    <el-option
                      v-for="item in enabledTypeOptions"
                      :key="item.key"
                      :label="item.display_name"
                      :value="item.key"
                    />
                  </el-select>
                  <rrOperation />
                </div>
                <crudOperation :permission="permission" @choose="handleChoose" />
              </div>

               <!--查看表单组件-->
            <el-dialog class="view-dialog" :fullscreen="fullscreenView" :close-on-click-modal="false" :before-close="crud.closeView" :visible="crud.status.view" width="900px">
              <div slot="title" class="el-dialog__title">
                <span>{{ crud.status.title }}</span>
                <el-button class="dialog-fullscreen" :icon="fullscreenView? 'el-icon-aliexitfullscreen':'el-icon-alifullscreen'" type="text" @click="fullscreenView = !fullscreenView" />
              </div>

              <el-form ref="form" :inline="true" :model="form" label-width="140px">
                <el-form-item label="用户名">
                  <div style="width: 160px;">{{ form.username }}</div>
                </el-form-item>
                <el-form-item label="电话">
                  <div style="width: 160px;">{{ form.phone }}</div>
                </el-form-item>
                <el-form-item label="身份证">
                  <div style="width: 160px;">{{ form.idCode }}</div>
                </el-form-item>
                <el-form-item label="籍贯">
                  <div style="width: 160px;">{{ form.nativeArea[0] }} {{ form.nativeArea[1] }}</div>
                </el-form-item>
                <el-form-item label="昵称">
                  <div style="width: 160px;">{{ form.nickName }}</div>
                </el-form-item>
                <el-form-item label="邮箱">
                  <div style="width: 160px;">{{ form.email }}</div>
                </el-form-item>
                <el-form-item label="部门">
                  <div style="width: 160px;">{{ form.dept.name }}</div>
                </el-form-item>
                 <el-form-item label="岗位">
                  <div style="width: 160px;">{{ form.jobs[0].name }}</div>
                </el-form-item>
                 <el-form-item label="性别">
                  <div style="width: 160px;">{{ form.gender }}</div>
                </el-form-item>
                 <el-form-item label="最高学历">
                  <div style="width: 160px;">{{ form.eduLevel }}</div>
                </el-form-item>
                <el-form-item label="参加工作时间">
                  <div style="width: 160px;">{{ parseTime(form.workDate,'{y}-{m}-{d}') }}</div>
                </el-form-item>
                 <el-form-item label="入职时间">
                  <div style="width: 160px;">{{ parseTime(form.inDate,'{y}-{m}-{d}') }}</div>
                </el-form-item>
                <el-form-item label="职责职务">
                  <div style="width: 160px;">{{ form.post }}</div>
                </el-form-item>
                <el-form-item label="办公电话">
                  <div style="width: 160px;">{{ form.mobile }}</div>
                </el-form-item>
                <el-form-item label="角色">
                  <div style="width: 160px;">{{ form.roles[0].name }}</div>
                </el-form-item>

              </el-form>

            </el-dialog>
              <!--表单渲染-->
              <el-dialog :fullscreen="fullscreen" append-to-body :close-on-click-modal="false" :before-close="crud.cancelCU" :visible="crud.status.cu > 0" width="55%">
                <div slot="title" class="el-dialog__title">
                  <span>{{ crud.status.title }}</span>
                  <el-button class="dialog-fullscreen" :icon="fullscreen? 'el-icon-aliexitfullscreen':'el-icon-alifullscreen'" type="text" @click="fullscreen = !fullscreen" />
                </div>
                <el-form ref="form" :inline="true" :model="form" :rules="rules" label-width="100px">
                  <el-form-item label="用户名" prop="username">
                    <el-input v-model="form.username" style="width: 220px" />
                  </el-form-item>
                  <el-form-item label="电话" prop="phone">
                    <el-input v-model.number="form.phone" style="width: 220px" />
                  </el-form-item>
                  <el-form-item label="身份证" prop="idCode">
                    <el-input v-model="form.idCode" style="width: 220px" />
                  </el-form-item>
                  <el-form-item label="籍贯">
                    <el-cascader
                      v-model="form.nativeArea"
                      :options="options"
                      style="width: 220px"
                      @change="handleChange"
                    />
                  </el-form-item>

                  <el-form-item label="昵称" prop="nickName">
                    <el-input v-model="form.nickName" style="width: 220px" />
                  </el-form-item>
                  <el-form-item label="邮箱" prop="email">
                    <el-input v-model="form.email" style="width: 220px" />
                  </el-form-item>

                  <el-form-item label="部门" prop="dept.id">
                    <treeselect v-model="form.dept.id" :options="depts" :load-options="loadDepts" placeholder="选择部门" style="width: 220px" />
                  </el-form-item>
                  <el-form-item label="岗位" prop="jobs">
                    <el-select v-model="jobDatas" multiple placeholder="请选择" style="width: 220px" @remove-tag="deleteTag" @change="changeJob">
                      <el-option
                        v-for="item in jobs"
                        :key="item.name"
                        :label="item.name"
                        :value="item.id"
                      />
                    </el-select>
                  </el-form-item>

                  <el-form-item label="性别" prop="gender">
                    <el-radio-group v-model="form.gender" style="width: 220px">
                      <el-radio label="男">男</el-radio>
                      <el-radio label="女">女</el-radio>
                    </el-radio-group>
                  </el-form-item>

                  <el-form-item label="最高学历" prop="eduLevel">
                    <el-input v-model="form.eduLevel" style="width: 220px" />
                  </el-form-item>
                  <el-form-item label="参加工作时间" prop="workDate">
                    <el-date-picker
                      v-model="form.workDate"
                      value-format="yyyy-MM-dd"
                      type="date"
                      placeholder="选择日期"
                      style="width: 220px"
                    />
                  </el-form-item>
                  <el-form-item label="入职时间" prop="inDate">
                    <el-date-picker
                      v-model="form.inDate"
                      value-format="yyyy-MM-dd"
                      type="date"
                      placeholder="选择日期"
                      style="width: 220px"
                    />
                  </el-form-item>
                  <el-form-item label="职责职务" prop="post">
                    <el-input v-model="form.post" style="width: 220px" />
                  </el-form-item>
                  <el-form-item label="办公电话" prop="mobile">
                    <el-input v-model="form.mobile" style="width: 220px" />
                  </el-form-item>

                  <el-form-item style="margin-bottom: 0;" label="角色" prop="roles">
                    <el-select
                      v-model="roleDatas"
                      multiple
                      placeholder="请选择"
                      style="width: 220px"
                      @remove-tag="deleteTag"
                      @change="changeRole"
                    >
                      <el-option
                        v-for="item in roles"
                        :key="item.name"
                        :disabled="level !== 1 && item.level <= level"
                        :label="item.name"
                        :value="item.id"
                      />
                    </el-select>
                  </el-form-item>
                </el-form>
                <div slot="footer" class="dialog-footer">
                  <el-button :loading="crud.status.cu === 2" type="primary" @click="crud.submitCU">确认</el-button>
                  <el-button @click="crud.cancelCU">取消</el-button>
                </div>
              </el-dialog>
              <!-- 离职表单 -->
              <el-dialog :fullscreen="leaveScreen" append-to-body :close-on-click-modal="false" :before-close="leaveClose" :visible="leaveDialog" width="600px">
                <div slot="title" class="el-dialog__title">
                  <span>离职</span>
                  <el-button class="dialog-fullscreen" :icon="leaveScreen? 'el-icon-aliexitfullscreen':'el-icon-alifullscreen'" type="text" @click="leaveScreen = !leaveScreen" />
                </div>
                <el-form ref="form" :inline="true" :model="leaveForm" :rules="rules" label-width="100px">
                  <div>
                    <el-form-item label="离职原因">
                      <el-input v-model="leaveForm.reason" type="textarea" style="width:400px" rows="4" />
                    </el-form-item>
                  </div>
                  <el-form-item label="离职时间" prop="inDate">
                    <el-date-picker
                      v-model="leaveForm.date"
                      value-format="yyyy-MM-dd"
                      type="date"
                      placeholder="选择日期"
                      style="width: 220px"
                    />
                  </el-form-item>
                  <el-form-item label="批准人">
                    <el-input v-model="leaveForm.approvaMan" style="width: 220px" />
                  </el-form-item>
                  <el-form-item label="批准领导">
                    <el-input v-model="leaveForm.approvaLeader" style="width: 220px" />
                  </el-form-item>

                </el-form>
                <div slot="footer" class="dialog-footer">
                  <el-button v-permission="permission.leave" :loading="leaveLoading" type="primary" @click="orgPersonQuit">确认</el-button>
                  <el-button @click="leaveClose">取消</el-button>
                </div>
              </el-dialog>

              <!--列表渲染-->
              <div v-show="chooseType === 'card'" class="cardFlex">
                <el-card v-for="(item,index) in crud.data" :key="index" shadow="hover" class="card">
                  <el-dropdown trigger="click" placement="bottom" class="card-more" @command="handleCommand">
                    <span class="el-dropdown-link">
                      <el-button slot="reference" icon="el-icon-alimore" type="more" />
                    </span>
                    <el-dropdown-menu slot="dropdown">
                      <el-dropdown-item v-permission="['admin','user:edit']" icon="el-icon-aliedit" :command="{name:'edit',value:item}">编辑</el-dropdown-item>
                      <el-dropdown-item v-permission="['admin','user:del']" icon="el-icon-alidel" :command="{name:'del',value:item.id}">删除</el-dropdown-item>
                    </el-dropdown-menu>
                  </el-dropdown>

                  <div class="title">{{ item.username }}</div>

                  <div class="wrap"><span class="tip">昵称：</span>{{ item.nickName }}</div>
                  <div class="wrap"><span class="tip">性别：</span>{{ item.gender }}</div>
                  <div class="wrap"><span class="tip">电话：</span>{{ item.phone }}</div>
                  <div class="wrap"><span class="tip">职责职务：</span>{{ item.post }}</div>
                </el-card>
              </div>

              <!--表格渲染-->
              <el-table v-show="chooseType==='list'" ref="table" v-loading="crud.loading" :data="crud.data" style="width: 100%;" @selection-change="crud.selectionChangeHandler">
                <el-table-column :selectable="checkboxT" type="selection" width="55" />
                <el-table-column :show-overflow-tooltip="true" prop="username" label="用户名" />
                <el-table-column :show-overflow-tooltip="true" prop="nickName" label="昵称" />
                <el-table-column prop="gender" label="性别" />
                <el-table-column :show-overflow-tooltip="true" prop="phone" width="120" label="电话" />
                <el-table-column :show-overflow-tooltip="true" width="150" prop="email" label="邮箱" />
                <el-table-column :show-overflow-tooltip="true" prop="post" label="职责职务" />
                <el-table-column label="状态" align="center">
                  <template slot-scope="scope">
                    <el-tag v-if="scope.row.isQuit === 0" type="primary">在职</el-tag>
                    <el-tag v-else type="danger">离职</el-tag>
                  </template>
                </el-table-column>
                <!-- <el-table-column :show-overflow-tooltip="true" prop="createTime" width="150" label="创建日期" /> -->
                <el-table-column prop="updateTime" label="操作时间" sortable>
                  <template slot-scope="scope">
                    {{ parseTime(scope.row.updateTime,'{y}-{m}-{d}') }}
                  </template>
                </el-table-column>
                <el-table-column
                  v-if="checkPer(['admin','user:edit','user:del'])"
                  label="操作"
                  width="260"
                  align="center"
                  fixed="right"
                >
                  <!-- <template slot-scope="scope">

                    <udOperation
                      :data="scope.row"
                      :permission="permission"
                      :disabled-dle="scope.row.id === user.id"
                    >
                      <el-button :disabled="scope.row.isQuit === 1" type="edit" size="mini" icon="el-icon-alilizhi" @click="handleLeave(scope.row)">离职</el-button>
                    </udOperation>
                  </template> -->
                  <template slot-scope="scope">
                  <el-dropdown trigger="click" placement="bottom" class="card-more" @command="handleCommand">
                    <span class="el-dropdown-link">
                      <el-button slot="reference" icon="el-icon-alimore" type="more" />
                    </span>
                    <el-dropdown-menu slot="dropdown">
                      <el-dropdown-item icon="el-icon-alipreview" :command="{ name: 'view', value: scope.row }">查看</el-dropdown-item>
                      <el-dropdown-item icon="el-icon-alipreview" :disabled="scope.row.isQuit === 1" :command="{ name: 'data', value: scope.row }">离职</el-dropdown-item>
                      <el-dropdown-item icon="el-icon-aliedit" :command="{ name: 'edit', value: scope.row }">编辑</el-dropdown-item>
                      <el-dropdown-item icon="el-icon-alidel" :command="{ name: 'del', value: scope.row }">删除</el-dropdown-item>
                    </el-dropdown-menu>
                  </el-dropdown>

                </template>
                </el-table-column>
              </el-table>
              <!--分页组件-->
              <pagination />
            </div>
          </el-col>
        </el-row>
      </div>
    </div>
  </div>
</template>

<script>
import crudUser from '@/api/system/user'
import { isvalidPhone, validateIdNo } from '@/utils/validate'
import { getDepts, getDeptSuperior } from '@/api/system/dept'
import { getAll, getLevel } from '@/api/system/role'
import { getAllJob } from '@/api/system/job'
import CRUD, { presenter, header, form, crud } from '@crud/crud'
import rrOperation from '@crud/RR.operation'
import crudOperation from '@crud/CRUD.operation'
import udOperation from '@crud/UD.operation'
import pagination from '@crud/Pagination'
import DateRangePicker from '@/components/DateRangePicker'
import Treeselect from '@riophae/vue-treeselect'
import { mapGetters } from 'vuex'
import '@riophae/vue-treeselect/dist/vue-treeselect.css'
import { LOAD_CHILDREN_OPTIONS } from '@riophae/vue-treeselect'
import areaData from '@/assets/json/area.json'
let userRoles = []
let userJobs = []
const defaultForm = { id: null, username: null, nickName: null, gender: '男', email: null, roles: [{name:''}], jobs: [{name:''}], dept: { id: null,name:null }, phone: null, idCode: null, enabled: true, eduLevel: null, workDate: null, inDate: null, post: null, mobile: null, isQuit: 0, nativeArea: [{name:''}], nativeProvince: null, nativeCity: null }
export default {
  name: 'User',
  components: { Treeselect, crudOperation, rrOperation, udOperation, pagination, DateRangePicker },
  cruds() {
    return CRUD({ title: '用户', url: 'api/users', crudMethod: { ...crudUser }})
  },
  mixins: [presenter(), header(), form(defaultForm), crud()],
  // 数据字典
  dicts: ['user_status'],
  data() {
    // 自定义验证
    const validPhone = (rule, value, callback) => {
      if (!value) {
        callback(new Error('请输入电话号码'))
      } else if (!isvalidPhone(value)) {
        callback(new Error('请输入正确的11位手机号码'))
      } else {
        callback()
      }
    }

    return {
      height: document.documentElement.clientHeight - 180 + 'px;',
      deptName: '', depts: [], deptDatas: [], jobs: [], level: 3, roles: [],
      jobDatas: [], roleDatas: [], // 多选时使用
      defaultProps: { children: 'children', label: 'name', isLeaf: 'leaf' },
      permission: {
        add: ['admin', 'user:add'],
        edit: ['admin', 'user:edit'],
        del: ['admin', 'user:del'],
        leave: ['admin', 'orgPersonQuit:add']
      },
      enabledTypeOptions: [
        { key: 0, display_name: '在职' },
        { key: 1, display_name: '离职' }
      ],
      rules: {
        username: [
          { required: true, message: '请输入用户名', trigger: 'blur' },
          { min: 2, max: 20, message: '长度在 2 到 20 个字符', trigger: 'blur' }
        ],
        nickName: [
          { required: true, message: '请输入用户昵称', trigger: 'blur' },
          { min: 2, max: 20, message: '长度在 2 到 20 个字符', trigger: 'blur' }
        ],
        email: [
          { required: true, message: '请输入邮箱地址', trigger: 'blur' },
          { type: 'email', message: '请输入正确的邮箱地址', trigger: 'blur' }
        ],
        phone: [
          { required: true, trigger: 'blur', validator: validPhone }
        ],
        idCode: [
          { required: true, trigger: 'blur', validator: validateIdNo }
        ],
        roles: [
          {  required: true, message: '请输入选择职务', trigger: 'change'}
        ],
        gender: [
          {  required: true, message: '请输入性别', trigger: 'change'}
        ],
      },

      fullscreen: false,
      leaveScreen: false,
      leaveDialog: false,
      leaveForm: {},
      leaveLoading: false,
      chooseType: 'list',
      options: []
    }
  },
  computed: {
    ...mapGetters([
      'user'
    ])
  },
  created() {
    this.crud.msg.add = '新增成功，默认密码：123456'
  },
  mounted: function() {
    const that = this
    window.onresize = function temp() {
      that.height = document.documentElement.clientHeight - 180 + 'px;'
    }
    this.options = areaData
  },
  methods: {
    changeRole(value) {
      userRoles = []
      value.forEach(function(data, index) {
        const role = { id: data }
        userRoles.push(role)
      })
    },
    changeJob(value) {
      userJobs = []
      value.forEach(function(data, index) {
        const job = { id: data }
        userJobs.push(job)
      })
    },
    deleteTag(value) {
      userRoles.forEach(function(data, index) {
        if (data.id === value) {
          userRoles.splice(index, value)
        }
      })
    },
    // 新增与编辑前做的操作
    [CRUD.HOOK.afterToCU](crud, form) {
      this.getRoles()
      if (form.id == null) {
        this.getDepts()
      } else {
        this.getSupDepts(form.dept.id)
      }
      this.getRoleLevel()
      this.getJobs()
    },
    // 新增前将多选的值设置为空
    [CRUD.HOOK.beforeToAdd]() {
      this.jobDatas = []
      this.roleDatas = []
    },
    // 初始化编辑时候的角色与岗位
    [CRUD.HOOK.beforeToEdit](crud, form) {
      this.getJobs(this.form.dept.id)
      this.jobDatas = []
      this.roleDatas = []
      userRoles = []
      userJobs = []
      const _this = this
      form.roles.forEach(function(role, index) {
        _this.roleDatas.push(role.id)
        const rol = { id: role.id }
        userRoles.push(rol)
      })
      form.jobs.forEach(function(job, index) {
        _this.jobDatas.push(job.id)
        const data = { id: job.id }
        userJobs.push(data)
      })
    },
    // 提交前做的操作
    [CRUD.HOOK.afterValidateCU](crud) {
      if (!crud.form.dept.id) {
        this.$message({
          message: '部门不能为空',
          type: 'warning'
        })
        return false
      } else if (this.jobDatas.length === 0) {
        this.$message({
          message: '岗位不能为空',
          type: 'warning'
        })
        return false
      } else if (this.roleDatas.length === 0) {
        this.$message({
          message: '角色不能为空',
          type: 'warning'
        })
        return false
      }
      crud.form.roles = userRoles
      crud.form.jobs = userJobs
      return true
    },
    [CRUD.HOOK.afterToEdit]() {
      if (this.form.nativeProvince) { this.form.nativeArea = [this.form.nativeProvince, this.form.nativeCity] }
    },
    [CRUD.HOOK.afterToView]() {
      if (this.form.nativeProvince) { this.form.nativeArea = [this.form.nativeProvince, this.form.nativeCity] }
    },
    // 获取左侧部门数据
    getDeptDatas(node, resolve) {
      const sort = 'id,desc'
      const params = { sort: sort }
      if (typeof node !== 'object') {
        if (node) {
          params['name'] = node
        }
      } else if (node.level !== 0) {
        params['pid'] = node.data.id
      }
      setTimeout(() => {
        getDepts(params).then(res => {
          if (resolve) {
            resolve(res.content)
          } else {
            this.deptDatas = res.content
          }
        })
      }, 100)
    },
    getDepts() {
      getDepts({ enabled: true }).then(res => {
        this.depts = res.content.map(function(obj) {
          if (obj.hasChildren) {
            obj.children = null
          }
          return obj
        })
      })
    },
    getSupDepts(deptId) {
      getDeptSuperior(deptId).then(res => {
        const date = res.content
        this.buildDepts(date)
        this.depts = date
      })
    },
    buildDepts(depts) {
      depts.forEach(data => {
        if (data.children) {
          this.buildDepts(data.children)
        }
        if (data.hasChildren && !data.children) {
          data.children = null
        }
      })
    },
    // 获取弹窗内部门数据
    loadDepts({ action, parentNode, callback }) {
      if (action === LOAD_CHILDREN_OPTIONS) {
        getDepts({ enabled: true, pid: parentNode.id }).then(res => {
          parentNode.children = res.content.map(function(obj) {
            if (obj.hasChildren) {
              obj.children = null
            }
            return obj
          })
          setTimeout(() => {
            callback()
          }, 200)
        })
      }
    },
    // 切换部门
    handleNodeClick(data) {
      if (data.pid === 0) {
        this.query.deptId = null
      } else {
        this.query.deptId = data.id
      }
      this.crud.toQuery()
    },
    // 获取弹窗内角色数据
    getRoles() {
      getAll().then(res => {
        this.roles = res
      }).catch(() => { })
    },
    // 获取弹窗内岗位数据
    getJobs() {
      getAllJob().then(res => {
        this.jobs = res.content
      }).catch(() => { })
    },
    // 获取权限级别
    getRoleLevel() {
      getLevel().then(res => {
        this.level = res.level
      }).catch(() => { })
    },
    checkboxT(row, rowIndex) {
      return row.id !== this.user.id
    },
    // handleCommand(command) {
    //   if (command.name === 'edit') {
    //     this.crud.toEdit(command.value)
    //   } else if (command.name === 'del') {
    //     this.$confirm('确定停止并删除该任务吗？', '提示', {
    //       confirmButtonText: '确定',
    //       cancelButtonText: '取消',
    //       type: 'warning'
    //     }).then(() => {
    //       this.delMethod(command.value)
    //     })
    //   }
    // },
    handleCommand(command) {
      if (command.name === 'view') {
        this.crud.toView(command.value)
      } else if (command.name === 'data') {
        console.log(command.value)
        this.handleLeave(command.value)
      }  else if (command.name === 'edit') {
        this.crud.toEdit(command.value)
      } else if (command.name === 'del') {
        
        this.$confirm('确定删除该条数据吗？', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          this.crud.doDelete(command.value)
        })
      }
    },
    handleChoose(value) {
      this.chooseType = value
    },
    handleLeave(item) {
      this.leaveDialog = true
      console.log(item)
      
      this.leaveForm.orgPersonId = item.id
    },
    leaveClose() {
      this.leaveDialog = false
      this.leaveForm = {}
    },
    orgPersonQuit() {
      this.leaveLoading = true
      this.leaveForm.status = 1
      crudUser.orgPersonQuit(this.leaveForm).then(res => {
        this.leaveLoading = false
        this.crud.toQuery()
        this.leaveDialog = false
      })
    },
    // 籍贯选择
    handleChange(value) {
      this.form.nativeProvince = value[0]
      this.form.nativeCity = value[1]
    }
  }
}
</script>

<style rel="stylesheet/scss" lang="scss" scoped>
.left-col{
  height: 100%;
  background: #fff;
  border-radius: 0px 6px 6px 6px
}

.right-col{
  border-radius: 6px 0px 6px 6px;
  padding:20px;
  height: calc(100% - 40px);
  background: #fff;
}

::v-deep .vue-treeselect__control,::v-deep .vue-treeselect__placeholder,::v-deep .vue-treeselect__single-value {
  height: 40px;
  line-height: 40px;
}
</style>
