<template>
  <div class="multiple-page-control-group" flex>
    <div class="multiple-page-control-content" flex-box="1">
      <div class="multiple-page-control-content-inner">
        <contextmenu
          :visible.sync="contextmenuFlag"
          :x="contentmenuX"
          :y="contentmenuY"
        >
          <contextmenu-list
            :menulist="tagName === '/index' ? contextmenuListIndex : contextmenuList"
            @rowClick="contextmenuClick"
          />
        </contextmenu>
        <el-tabs
          class="multiple-page-control multiple-page-sort"
          :value="current"
          type="card"
          @tab-click="handleClick"
          @tab-remove="handleTabRemove"
          @contextmenu.native="handleContextmenu"
        >
          <el-tab-pane
            v-for="page in opened"
            :key="page.fullPath"
            :label="page.meta.title || '未命名'"
            :name="page.fullPath"
            :closable="isTabClosable(page)"
          />
        </el-tabs>
      </div>
    </div>
    <div class="multiple-page-control-btn" flex-box="0">
      <el-dropdown
        size="default"
        split-button
        @click="$store.dispatch('page/closeAll')"
        @command="command => handleControlItemClick(command)"
      >
        <icon name="times-circle" />
        <el-dropdown-menu slot="dropdown">
          <el-dropdown-item command="left">
            <icon name="arrow-left" class="mr-10" />
            关闭左侧
          </el-dropdown-item>
          <el-dropdown-item command="right">
            <icon name="arrow-right" class="mr-10" />
            关闭右侧
          </el-dropdown-item>
          <el-dropdown-item command="other">
            <icon name="times" class="mr-10" />
            关闭其它
          </el-dropdown-item>
          <el-dropdown-item command="all">
            <icon name="times-circle" class="mr-10" />
            全部关闭
          </el-dropdown-item>
        </el-dropdown-menu>
      </el-dropdown>
    </div>
  </div>
</template>

<script>
import { mapGetters } from 'vuex'
import Sortable from 'sortablejs'

export default {
  components: {
    Contextmenu: () => import('../contextmenu'),
    ContextmenuList: () => import('../contextmenu/components/contentmenuList')
  },
  data() {
    return {
      contextmenuFlag: false,
      contentmenuX: 0,
      contentmenuY: 0,
      contextmenuListIndex: [
        { icon: 'times-circle', title: '关闭全部', value: 'all' }
      ],
      contextmenuList: [
        { icon: 'refresh', title: '刷新', value: 'refresh' },
        { icon: 'arrow-left', title: '关闭左侧', value: 'left' },
        { icon: 'arrow-right', title: '关闭右侧', value: 'right' },
        { icon: 'times', title: '关闭其它', value: 'other' },
        { icon: 'times-circle', title: '关闭全部', value: 'all' }
      ],
      tagName: '/index'
    }
  },
  computed: {
    ...mapGetters(['opened', 'current'])
  },
  mounted() {
    const el = document.querySelectorAll('.multiple-page-sort .el-tabs__nav')[0]
    Sortable.create(el, {
      onEnd: (evt) => {
        const { oldIndex, newIndex } = evt
        this.$store.dispatch('page/openedSort', { oldIndex, newIndex })
      }
    })
  },
  methods: {
    /**
     * @description 计算某个标签页是否可关闭
     * @param {Object} page 其中一个标签页
     */
    isTabClosable(page) {
      return page.name !== 'index'
    },
    /**
     * @description 右键菜单功能点击
     * @param {Object} event 事件
     */
    handleContextmenu(event) {
      let target = event.target
      // fix https://github.com/projects/admin/issues/54
      let flag = false
      if (target.className.indexOf('el-tabs__item') > -1) flag = true
      else if (target.parentNode.className.indexOf('el-tabs__item') > -1) {
        target = target.parentNode
        flag = true
      }
      if (flag) {
        event.preventDefault()
        event.stopPropagation()
        this.contentmenuX = event.clientX
        this.contentmenuY = event.clientY
        this.tagName = target.getAttribute('aria-controls').slice(5)
        this.contextmenuFlag = true
      }
    },
    /**
     * @description 右键菜单的 row-click 事件
     * @param {String} command 事件类型
     */
    contextmenuClick(command) {
      this.handleControlItemClick(command, this.tagName)
    },
    /**
     * @description 接收点击关闭控制上选项的事件
     * @param {String} command 事件类型
     * @param {String} tagName tab 名称
     */
    handleControlItemClick(command, tagName = null) {
      if (tagName) this.contextmenuFlag = false
      const params = { pageSelect: tagName }
      switch (command) {
        case 'refresh': this.$router.push({ name: 'refresh' }); break
        case 'left': this.$store.dispatch('page/closeLeft', params); break
        case 'right': this.$store.dispatch('page/closeRight', params); break
        case 'other': this.$store.dispatch('page/closeOther', params); break
        case 'all':this.$store.dispatch('page/closeAll'); break
        default: this.$message.error('无效的操作'); break
      }
    },
    /**
     * @description 接收点击 tab 标签的事件
     * @param {object} tab 标签
     * @param {object} event 事件
     */
    handleClick(tab, event) {
      // 找到点击的页面在 tag 列表里是哪个
      const page = this.opened.find(page => page.fullPath === tab.name)
      if (page) {
        const { name, params, query } = page
        this.$router.push({ name, params, query })
      }
    },
    /**
     * @description 点击 tab 上的删除按钮触发这里
     * @param {String} tagName tab 名称
     */
    handleTabRemove(tagName) {
      this.$store.dispatch('page/close', { tagName })
    }
  }
}
</script>
