<template>
  <div class="crud-opts">
    <span class="crud-opts-left">
      <!--左侧插槽-->
      <slot name="left" />
      <el-button v-if="crud.optShow.add" v-permission="permission.add" size="medium" type="primary" icon="el-icon-plus" @click="crud.toAdd">
        新增
      </el-button>

      <el-button
        v-if="crud.optShow.del"
        slot="reference"
        v-permission="permission.del"
        icon="el-icon-alidel"
        type="danger"
        plain
        size="medium"
        :loading="crud.delAllLoading"
        :disabled="crud.selections.length === 0"
        @click="toDelete(crud.selections)"
      >
        删除
      </el-button>
      <el-button v-if="crud.optShow.download" :loading="crud.downloadLoading" :disabled="!crud.data.length" size="medium" icon="el-icon-alidaochu" @click="crud.doExport">导出</el-button>
    </span>
    <el-button-group class="crud-opts-right">
      <div v-if="viewBar" style="margin-right: 15px">
        <el-tooltip class="item" effect="dark" content="平铺视图" placement="top">
          <el-button size="mini" icon="el-icon-alimenu" :style="{ color: chooseType === 'card' ? '#24C139' : '' }" @click="handleClick('card')" />
        </el-tooltip>
        <el-tooltip class="item" effect="dark" content="列表视图" placement="top">
          <el-button size="mini" :style="{ color: chooseType === 'list' ? '#24C139' : '' }" icon="el-icon-alilist" @click="handleClick('list')" />
        </el-tooltip>
      </div>
      <!--右侧-->
      <slot name="right" />
    </el-button-group>
  </div>
</template>
<script>
import CRUD, { crud } from '@crud/crud'

export default {
  mixins: [crud()],
  props: {
    permission: {
      type: Object,
      default: () => {
        return {}
      }
    },
    hiddenColumns: {
      type: Array,
      default: () => {
        return []
      }
    },
    ignoreColumns: {
      type: Array,
      default: () => {
        return []
      }
    },
    viewBar: {
      type: Boolean,
      default: true
    }
  },
  data() {
    return {
      chooseType: 'list',
      allColumnsSelected: true,
      allColumnsSelectedIndeterminate: false,
      tableUnwatcher: null,
      // 忽略下次表格列变动
      ignoreNextTableColumnsChange: false
    }
  },
  created() {
    this.crud.updateProp('searchToggle', true)
  },
  methods: {
    toDelete(datas) {
      this.$confirm(`确认删除选中的${datas.length}条数据?`, '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      })
        .then(() => {
          this.crud.delAllLoading = true
          this.crud.doDelete(datas)
        })
        .catch(() => { })
    },
    handleCheckAllChange(val) {
      if (val === false) {
        this.allColumnsSelected = true
        return
      }
      this.tableColumns.forEach((column) => {
        if (!column.visible) {
          column.visible = true
          this.updateColumnVisible(column)
        }
      })
      this.allColumnsSelected = val
      this.allColumnsSelectedIndeterminate = false
    },
    handleCheckedTableColumnsChange(item) {
      let totalCount = 0
      let selectedCount = 0
      this.tableColumns.forEach((column) => {
        ++totalCount
        selectedCount += column.visible ? 1 : 0
      })
      if (selectedCount === 0) {
        this.crud.notify('请至少选择一列', CRUD.NOTIFICATION_TYPE.WARNING)
        this.$nextTick(function() {
          item.visible = true
        })
        return
      }
      this.allColumnsSelected = selectedCount === totalCount
      this.allColumnsSelectedIndeterminate =
        selectedCount !== totalCount && selectedCount !== 0
      this.updateColumnVisible(item)
    },
    updateColumnVisible(item) {
      const table = this.crud.props.table
      const vm = table.$children.find((e) => e.prop === item.property)
      const columnConfig = vm.columnConfig
      if (item.visible) {
        // 找出合适的插入点
        const columnIndex = this.tableColumns.indexOf(item)
        vm.owner.store.commit(
          'insertColumn',
          columnConfig,
          columnIndex + 1,
          null
        )
      } else {
        vm.owner.store.commit('removeColumn', columnConfig, null)
      }
      this.ignoreNextTableColumnsChange = true
    },
    handleClick(type) {
      this.chooseType = type
      this.$emit('choose', type)
    }
  }
}
</script>

<style lang="scss" scoped>
.crud-opts {
  padding: 4px 0;
  display: -webkit-flex;
  display: flex;
  align-items: center;

  .crud-opts-right {
    margin-left: auto;
    display: flex;
    align-items: center;
    .el-button {
      border: none;
      background-color: transparent;
      padding: 0 5px;

      ::v-deep i {
        font-size: 20px;
      }
    }
  }
}
.el-button {
  font-size: 16px;
  ::v-deep i {
    font-size: 16px;
  }
}
</style>
